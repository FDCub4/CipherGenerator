# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'CipherDesigner.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(868, 673)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.Main = QtWidgets.QFrame(self.centralwidget)
        self.Main.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.Main.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Main.setObjectName("Main")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.Main)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.TextIO = QtWidgets.QFrame(self.Main)
        self.TextIO.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.TextIO.setFrameShadow(QtWidgets.QFrame.Raised)
        self.TextIO.setObjectName("TextIO")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.TextIO)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label = QtWidgets.QLabel(self.TextIO)
        self.label.setObjectName("label")
        self.horizontalLayout_3.addWidget(self.label)
        self.label_2 = QtWidgets.QLabel(self.TextIO)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_3.addWidget(self.label_2)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.plain_text_edit = QtWidgets.QTextEdit(self.TextIO)
        self.plain_text_edit.setObjectName("plain_text_edit")
        self.horizontalLayout_2.addWidget(self.plain_text_edit)
        self.cipher_text_browser = QtWidgets.QTextBrowser(self.TextIO)
        self.cipher_text_browser.setObjectName("cipher_text_browser")
        self.horizontalLayout_2.addWidget(self.cipher_text_browser)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.keymap = QtWidgets.QTableWidget(self.TextIO)
        self.keymap.setEnabled(True)
        self.keymap.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.keymap.setAutoFillBackground(False)
        self.keymap.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.keymap.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.keymap.setLineWidth(1)
        self.keymap.setMidLineWidth(0)
        self.keymap.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.keymap.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.keymap.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
        self.keymap.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.keymap.setAlternatingRowColors(True)
        self.keymap.setShowGrid(True)
        self.keymap.setGridStyle(QtCore.Qt.SolidLine)
        self.keymap.setObjectName("keymap")
        self.keymap.setColumnCount(26)
        self.keymap.setRowCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(8, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(9, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(10, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(11, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(12, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(13, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(14, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(15, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(16, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(17, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(18, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(19, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(20, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(21, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(22, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(23, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(24, item)
        item = QtWidgets.QTableWidgetItem()
        self.keymap.setHorizontalHeaderItem(25, item)
        self.keymap.horizontalHeader().setVisible(True)
        self.keymap.horizontalHeader().setCascadingSectionResizes(False)
        self.keymap.horizontalHeader().setDefaultSectionSize(34)
        self.keymap.horizontalHeader().setMinimumSectionSize(34)
        self.keymap.verticalHeader().setVisible(True)
        self.keymap.verticalHeader().setDefaultSectionSize(23)
        self.verticalLayout.addWidget(self.keymap)
        self.verticalLayout_5.addWidget(self.TextIO)
        self.frame_2 = QtWidgets.QFrame(self.Main)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_4 = QtWidgets.QLabel(self.frame_2)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_3.addWidget(self.label_4)
        self.cipher_select_layout = QtWidgets.QGridLayout()
        self.cipher_select_layout.setObjectName("cipher_select_layout")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setHorizontalSpacing(0)
        self.gridLayout.setVerticalSpacing(6)
        self.gridLayout.setObjectName("gridLayout")
        self.homophonic_button = QtWidgets.QRadioButton(self.frame_2)
        self.homophonic_button.setObjectName("homophonic_button")
        self.gridLayout.addWidget(self.homophonic_button, 3, 0, 1, 1)
        self.polyalphabetic_substitution_button = QtWidgets.QRadioButton(self.frame_2)
        self.polyalphabetic_substitution_button.setObjectName("polyalphabetic_substitution_button")
        self.gridLayout.addWidget(self.polyalphabetic_substitution_button, 1, 1, 1, 1)
        self.plain_button = QtWidgets.QRadioButton(self.frame_2)
        self.plain_button.setObjectName("plain_button")
        self.gridLayout.addWidget(self.plain_button, 4, 1, 1, 1)
        self.monoalphabetic_button = QtWidgets.QRadioButton(self.frame_2)
        self.monoalphabetic_button.setObjectName("monoalphabetic_button")
        self.gridLayout.addWidget(self.monoalphabetic_button, 2, 0, 1, 1)
        self.hill_button = QtWidgets.QRadioButton(self.frame_2)
        self.hill_button.setObjectName("hill_button")
        self.gridLayout.addWidget(self.hill_button, 3, 1, 1, 1)
        self.playfair_button = QtWidgets.QRadioButton(self.frame_2)
        self.playfair_button.setObjectName("playfair_button")
        self.gridLayout.addWidget(self.playfair_button, 2, 1, 1, 1)
        self.caesar_button = QtWidgets.QRadioButton(self.frame_2)
        self.caesar_button.setObjectName("caesar_button")
        self.gridLayout.addWidget(self.caesar_button, 1, 0, 1, 1)
        self.polygram_substitution_button = QtWidgets.QRadioButton(self.frame_2)
        self.polygram_substitution_button.setObjectName("polygram_substitution_button")
        self.gridLayout.addWidget(self.polygram_substitution_button, 4, 0, 1, 1)
        self.cipher_select_layout.addLayout(self.gridLayout, 2, 0, 1, 1)
        self.verticalLayout_3.addLayout(self.cipher_select_layout)
        self.horizontalLayout_6.addLayout(self.verticalLayout_3)
        self.frame = QtWidgets.QFrame(self.frame_2)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_2.addItem(spacerItem)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.shift_group = QtWidgets.QLabel(self.frame)
        self.shift_group.setEnabled(False)
        self.shift_group.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.shift_group.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.shift_group.setObjectName("shift_group")
        self.horizontalLayout_4.addWidget(self.shift_group)
        self.shift_slider = QtWidgets.QSlider(self.frame)
        self.shift_slider.setEnabled(False)
        self.shift_slider.setMaximum(25)
        self.shift_slider.setOrientation(QtCore.Qt.Horizontal)
        self.shift_slider.setObjectName("shift_slider")
        self.horizontalLayout_4.addWidget(self.shift_slider)
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setEnabled(False)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_4.addWidget(self.label_3)
        self.verticalLayout_2.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.keyword_label = QtWidgets.QLabel(self.frame)
        self.keyword_label.setEnabled(False)
        self.keyword_label.setObjectName("keyword_label")
        self.horizontalLayout_5.addWidget(self.keyword_label)
        self.keyword_edit = QtWidgets.QLineEdit(self.frame)
        self.keyword_edit.setEnabled(False)
        self.keyword_edit.setMaxLength(26)
        self.keyword_edit.setFrame(True)
        self.keyword_edit.setObjectName("keyword_edit")
        self.horizontalLayout_5.addWidget(self.keyword_edit)
        self.verticalLayout_2.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6.addWidget(self.frame)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_4.addItem(spacerItem1)
        self.ok_cancel_buttons = QtWidgets.QDialogButtonBox(self.frame_2)
        self.ok_cancel_buttons.setOrientation(QtCore.Qt.Vertical)
        self.ok_cancel_buttons.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.ok_cancel_buttons.setObjectName("ok_cancel_buttons")
        self.verticalLayout_4.addWidget(self.ok_cancel_buttons)
        self.horizontalLayout_6.addLayout(self.verticalLayout_4)
        self.verticalLayout_5.addWidget(self.frame_2)
        self.gridLayout_5.addWidget(self.Main, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 868, 21))
        self.menuBar.setObjectName("menuBar")
        MainWindow.setMenuBar(self.menuBar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")

        self.retranslateUi(MainWindow)
        self.caesar_button.toggled['bool'].connect(self.shift_group.setEnabled) # type: ignore
        self.monoalphabetic_button.toggled['bool'].connect(self.keyword_label.setEnabled) # type: ignore
        self.monoalphabetic_button.toggled['bool'].connect(self.keyword_edit.setEnabled) # type: ignore
        self.homophonic_button.toggled['bool'].connect(self.keyword_edit.setEnabled) # type: ignore
        self.homophonic_button.toggled['bool'].connect(self.keyword_label.setEnabled) # type: ignore
        self.shift_slider.valueChanged['int'].connect(self.label_3.setNum) # type: ignore
        self.keyword_edit.textChanged['QString'].connect(self.keymap.resizeRowsToContents) # type: ignore
        self.caesar_button.toggled['bool'].connect(self.shift_slider.setEnabled) # type: ignore
        self.caesar_button.toggled['bool'].connect(self.label_3.setEnabled) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.caesar_button, self.monoalphabetic_button)
        MainWindow.setTabOrder(self.monoalphabetic_button, self.homophonic_button)
        MainWindow.setTabOrder(self.homophonic_button, self.polygram_substitution_button)
        MainWindow.setTabOrder(self.polygram_substitution_button, self.polyalphabetic_substitution_button)
        MainWindow.setTabOrder(self.polyalphabetic_substitution_button, self.playfair_button)
        MainWindow.setTabOrder(self.playfair_button, self.hill_button)
        MainWindow.setTabOrder(self.hill_button, self.plain_button)

        """post QTDesigner add-ons"""
        from PyQt5.QtWidgets import QApplication, QMainWindow, QButtonGroup, QRadioButton, QTableWidget, QPushButton, QVBoxLayout, QWidget, QLineEdit, QHBoxLayout, QTableWidgetItem
        import re, random
        
        
        alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
        self.cipher = []


        #add the radio buttons to a group
        self.button_choice = 7

        def onButtonClicked(id):
            self.button_choice = id
            self.cipher_list = update_cipher_choice()
            updateOutput()

        self.cipher_group = QButtonGroup()
        self.cipher_group.buttonClicked[int].connect(onButtonClicked) #could be an error here, GPT didn't get teh right answer so I had to throw something together.
        self.plain_button.setChecked(True)

        self.cipher_group.addButton(self.caesar_button, 0)
        self.cipher_group.addButton(self.monoalphabetic_button, 1)
        self.cipher_group.addButton(self.homophonic_button, 2)
        self.cipher_group.addButton(self.polygram_substitution_button, 3)
        self.cipher_group.addButton(self.polyalphabetic_substitution_button, 4)
        self.cipher_group.addButton(self.playfair_button, 5)
        self.cipher_group.addButton(self.hill_button, 6)
        self.cipher_group.addButton(self.plain_button, 7)





        def caesar_cipher(text, update_map=False):

            def reorder_list(arr, start):                           # helper function to shift a list by 'start' amount
                return arr[start:] + arr[:start]
            
            shift = int(self.shift_slider.value())
            cipher = reorder_list(alphabet, shift)
            number_list = [ord(char) - ord('a') for char in text]  # create a list that has numbers instead of letters
            
            if update_map:
                self.keymap.setRowCount(1)
                for i in range(self.keymap.model().rowCount()):
                    item = QtWidgets.QTableWidgetItem()
                    self.keymap.setVerticalHeaderItem(i, item)
                for i, element in enumerate(cipher):
                    self.keymap.setItem(0, i, QTableWidgetItem(element.upper()))

            encrypted_message = ''
            for x in number_list:
                encrypted_message += cipher[x]
            
            return encrypted_message


        def monoalphabetic_cipher(text, update_map=False):
            encrypted_message = ''
            keyword = self.keyword_edit.text()
            regex = r'[^a-z]'
            keyword = re.sub(regex, '', keyword)
            cipher = list(keyword)
            cipher += [chr(ord('a') + i) for i in range(26) if chr(ord('a') + i) not in keyword]
            number_text = [ord(char) - ord('a') for char in text]

            if update_map:
                self.keymap.setRowCount(1)
                for i in range(self.keymap.model().rowCount()):
                    item = QtWidgets.QTableWidgetItem()
                    self.keymap.setVerticalHeaderItem(i, item)
                for i, element in enumerate(cipher):
                    self.keymap.setItem(0, i, QTableWidgetItem(element.upper()))
                self.keyword_edit.setMaxLength(26)


            for x in number_text:
                encrypted_message += cipher[x]

            return encrypted_message

        def homophonic_cipher(text, update_map=False):
            if update_map:
                if len(self.keyword_edit.text()) > 4:
                    self.keyword_edit.setText(self.keyword_edit.text()[:4])
                keyword = self.keyword_edit.text().lower()
                regex = r'[^a-z]'
                keyword = re.sub(regex, '', keyword)
                keyword_list = [ord(char) - ord('a') - 1 for char in keyword]
                self.cipher = [[0]*26,[0]*26,[0]*26,[0]*26]
                #keyword must be 4 letters.

                for i, num in enumerate(keyword_list): # creates the list that holds the cipher
                    self.cipher[i][num] = (i * 26) + num
                    for x in range((25 * i) + 1, (26 * (i + 1) + 1)):
                        self.cipher[i][(num + x) % 26] = x

                self.keyword_edit.setMaxLength(4)
                keyword = list(keyword)

                if len(keyword) > 0:

                    for i, char in enumerate(keyword):
                        self.keymap.setRowCount(i + 1)
                        item = QtWidgets.QTableWidgetItem()
                        self.keymap.setVerticalHeaderItem(i, item)
                        item.setText(char.upper())
                        for j in range(len(self.cipher[i])):
                            self.keymap.setItem(i, j, QTableWidgetItem(str(self.cipher[i][j])))
                else:
                    self.keymap.setRowCount(1)
                    for i in range(self.keymap.model().rowCount()):
                        item = QtWidgets.QTableWidgetItem()
                        self.keymap.setVerticalHeaderItem(i, item)

                        for j in range(26):
                            item = QtWidgets.QTableWidgetItem()
                            self.keymap.setItem(i, j, item)
                    
            number_list = [ord(char) - ord('a') for char in text]
            encrypted_message = ''

            for x in number_list:
                encrypted_message += str(random.choice([self.cipher[0][x], self.cipher[1][x], self.cipher[2][x], self.cipher[3][x]])) + ' '


            return encrypted_message

        def polygram_sub_cipher(text, update_map=False):
            pass

        def polyalphabetic_sub_cipher(text, update_map=False):
            pass

        def playfair_cipher(text, update_map=False):
            pass

        def hill_cipher(text, update_map=False):
            pass

        
        def update_cipher_choice():
            pass

        #list of functions because why not
        cipher_list = [caesar_cipher, monoalphabetic_cipher, homophonic_cipher, polygram_sub_cipher, \
                    polyalphabetic_sub_cipher, playfair_cipher, hill_cipher]
        
        def updateOutput(update_map=False):
            text = self.plain_text_edit.toPlainText().lower()       # get text from plaintext box
            regex = r'[^a-z]'
            text = re.sub(regex, '', text)
            
            if self.button_choice == 7:                
                self.cipher_text_browser.setText(text)            

            elif self.button_choice in range(8):
                update_map if self.cipher_text_browser.setText(cipher_list[self.button_choice](text, update_map=True)) else \
                    self.cipher_text_browser.setText(cipher_list[self.button_choice](text))
            
        
        
        self.plain_text_edit.textChanged.connect(updateOutput)

        self.shift_slider.valueChanged.connect(lambda: updateOutput(update_map=True))
        self.keyword_edit.textChanged.connect(lambda: updateOutput(update_map=True))


    """End of Changes made to UI"""

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Plain Text"))
        self.label_2.setText(_translate("MainWindow", "CipherText"))
        self.keymap.setSortingEnabled(False)
        item = self.keymap.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", ""))
        item = self.keymap.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "A"))
        item = self.keymap.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "B"))
        item = self.keymap.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "C"))
        item = self.keymap.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "D"))
        item = self.keymap.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "E"))
        item = self.keymap.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "F"))
        item = self.keymap.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "G"))
        item = self.keymap.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "H"))
        item = self.keymap.horizontalHeaderItem(8)
        item.setText(_translate("MainWindow", "I"))
        item = self.keymap.horizontalHeaderItem(9)
        item.setText(_translate("MainWindow", "J"))
        item = self.keymap.horizontalHeaderItem(10)
        item.setText(_translate("MainWindow", "K"))
        item = self.keymap.horizontalHeaderItem(11)
        item.setText(_translate("MainWindow", "L"))
        item = self.keymap.horizontalHeaderItem(12)
        item.setText(_translate("MainWindow", "M"))
        item = self.keymap.horizontalHeaderItem(13)
        item.setText(_translate("MainWindow", "N"))
        item = self.keymap.horizontalHeaderItem(14)
        item.setText(_translate("MainWindow", "O"))
        item = self.keymap.horizontalHeaderItem(15)
        item.setText(_translate("MainWindow", "P"))
        item = self.keymap.horizontalHeaderItem(16)
        item.setText(_translate("MainWindow", "Q"))
        item = self.keymap.horizontalHeaderItem(17)
        item.setText(_translate("MainWindow", "R"))
        item = self.keymap.horizontalHeaderItem(18)
        item.setText(_translate("MainWindow", "S"))
        item = self.keymap.horizontalHeaderItem(19)
        item.setText(_translate("MainWindow", "T"))
        item = self.keymap.horizontalHeaderItem(20)
        item.setText(_translate("MainWindow", "U"))
        item = self.keymap.horizontalHeaderItem(21)
        item.setText(_translate("MainWindow", "V"))
        item = self.keymap.horizontalHeaderItem(22)
        item.setText(_translate("MainWindow", "W"))
        item = self.keymap.horizontalHeaderItem(23)
        item.setText(_translate("MainWindow", "X"))
        item = self.keymap.horizontalHeaderItem(24)
        item.setText(_translate("MainWindow", "Y"))
        item = self.keymap.horizontalHeaderItem(25)
        item.setText(_translate("MainWindow", "Z"))
        self.label_4.setText(_translate("MainWindow", "Cryptography Method"))
        self.homophonic_button.setText(_translate("MainWindow", "Homophonic"))
        self.polyalphabetic_substitution_button.setText(_translate("MainWindow", "Polyalphabetic Substitution"))
        self.plain_button.setText(_translate("MainWindow", "No Encryption"))
        self.monoalphabetic_button.setText(_translate("MainWindow", "Monoalphabetic"))
        self.hill_button.setText(_translate("MainWindow", "Hill"))
        self.playfair_button.setText(_translate("MainWindow", "Playfair"))
        self.caesar_button.setText(_translate("MainWindow", "Caesar"))
        self.polygram_substitution_button.setText(_translate("MainWindow", "Polygram Substitution"))
        self.shift_group.setText(_translate("MainWindow", "Shift"))
        self.label_3.setText(_translate("MainWindow", "0"))
        self.keyword_label.setText(_translate("MainWindow", "Keyword"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionSave.setText(_translate("MainWindow", "Save"))

if __name__ == "__main__":

    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
